1. Что это?

Парсер QuadBraces - это реализация парсера-шаблонизатора MODX / Etomite.
Реализация отдельная, что позволяет использовать синтаксис MODX без установки
этого движка на проект. Также следует отметить, что синтаксис расширенный.

2. Поддерживаемые элементы

{{  }} - чанки
{*  *} - константы PHP
[(  )] - "настройки"
[*  *] - плейсхолдеры
[^  ^] - отладочные данные
[!  !] - сниппеты
[%  %] - языковые элементы
{!  !} - автоитераторы (DataE) струтурных данных

Внутри элементов могут использоваться локальные плейсхолдеры: [+  +]

Общий синтаксис элемента внутри управляющих скобок:
ключ_элемента:расширение1=`значение`:расширение2 &арг1=`знач` &арг2=`знач`

Иными словами сначала идёт ключ элемента. Затем используемые расширения,
если таковые используются. Затем ряд аргументов, если таковые используются.

ОБРАТИТЕ ВНИМАНИЕ:
- Точка в названиях чанков, сниппетов и шаблонов заменяется при поиске файла
на системный разделитель каталогов. Это позволяет создавать шаблонные
структуры любого уровня вложенности. Точка в названиях остальных элементов
интерпретируется, как точка.
- У некоторых расширений есть дополнительные "расширения". Например, у
базовой логики есть расширения "then" и "else".
- При обработке внутренних плейсхолдеров расширений обрабатываются только
базовые расширения логики оных

3. Поддерживаемые расширения
is, eq     - равенство (сравниваемое значение, then, else)
isnot, neq - неравенство (сравниваемое значение, then, else)
lt         - меньше, чем (сравниваемое значение, then, else)
lte        - меньше, чем, или равно (сравниваемое значение, then, else)
gt         - больше, чем (сравниваемое значение, then, else)
gte        - больше, чем или равно (сравниваемое значение, then, else)
even       - признак чётности (сравниваемое значение, then, else)
odd        - признак нечётности (сравниваемое значение, then, else)
for        - целочисленный итератор (количество итераций, start, splitter)
foreach    - индексный итератор (список индексов через запятую, splitter)

- Для расширения for доступен внутренний плейсхолдер [+iterator+], содержащий
номер текущей итерации
- Для расширения foreach доступны внутренние плейсхолдеры:
  [+iterator.index+] - номер позиции текущей итерации
  [+iterator+]       - текущий индекс

4. Примеры
{{my_chunk}}
  Выведет содержимое файла "my_chunk.html" из папки с шаблонами

{{my.chunk}}
  Выведет содержимое файла "my/chunk.html" из папки с шаблонами

{{my.chunk &foo=`bar`}}
  Выведет содержимое файла "my/chunk.html" из папки с шаблонами, заменив
  внутри плейсхолдер "[+foo+]" на значение "bar"

{*MY_CONSTANT*}
  Выведет значение константы "MY_CONSTANT", если таковая определена

{*MY_CONSTANT:empty=`foobar`*}
  Выведет значение константы "MY_CONSTANT", если таковая определена,
  иначе (или если константа пуста) выведет "foobar"

[(my_setting)]
  Выведет значение элемента "my_setting" из массива settings парсера

[*my_placeholder*]
  Выведет значение элемента "my_placeholder" из массива data парсера

[^totalmem.kb^]
  Выведет значение потребляемого ОЗУ в килобайтах с округлением в два знака

[!my.snippet &arg1=`foo` &arg2=`bar`!]
  Выполнит код из файла "my/snippet.php" из папки с шаблонами,
  передав в переменную arguments внутри обёртки массив:

  array('arg1' => 'foo','arg2' => 'bar')

[%my_lang_string%]
  Выведет CAPTION языкового элемента "my_lang_string" текущего языка

[%my_lang_string.hint%]
  Выведет HINT языкового элемента "my_lang_string" текущего языка

{!my_data!}
  Выведет элементы списка элемента "my_data" массива data парсера.
  Выводимый код каждой итерации будет примерно таким:

  <li>
    <span class="key">ключ_элемента</span>
    <span class="value">значение_элемента</span>
  </li>

{!my_data &langKeys=`1`!}
  Выведет элементы списка элемента "my_data" массива data парсера
  с подстановкой в качестве ключа языкового плейсхолдера.
  Выводимый код каждой итерации будет примерно таким:

  <li>
    <span class="key">[%ключ_элемента%]</span>
    <span class="value">значение_элемента</span>
  </li>

{!my_data &langKeys=`1` &langPrefix=`myprefix`!}
  Выведет элементы списка элемента "my_data" массива data парсера
  с подстановкой в качестве ключа языкового плейсхолдера.
  Выводимый код каждой итерации будет примерно таким:

  <li>
    <span class="key">[%myprefix.ключ_элемента%]</span>
    <span class="value">значение_элемента</span>
  </li>

{!my_data &chunk=`my.chunk`!}
  Выведет элементы списка элемента "my_data" массива data парсера.
  Выводимый код каждой итерации будет примерно таким:

  {{my.chunk ... }}

  На месте троеточия будет строка аргументов, передаваемых в чанк, ключом
  каждого из которых будет ключ под-элемента, а значением - значение оного.
  Очень востребовано для вывода значений, являющихся двухмерными массивами.
